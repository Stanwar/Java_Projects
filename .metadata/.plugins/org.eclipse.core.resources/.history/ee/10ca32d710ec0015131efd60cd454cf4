package Beverages;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Arrays;
import java.util.Scanner;


public class DrinksMachine {
	// Enum for Initial Available Drinks. More can be added if necessary.
	public enum Drinks{
		AMERICANO ( "Caffe Americano"),
		LATTE ( "Caffe Latte"),
		MOCHA ( "Caffe Mocha"),
		CAPPUCCINO ( "Cappuccino"),
		COFFEE ("Coffee"),
		DECAF ("Decaf Coffee");
		
		private final String name;
		//Setting name
		Drinks( String name){
			this.name = name;
		}
		// Getter for name
		String getName(){
			return name;
		}
	}
	public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException{
		// Loading inventory
		InventoryManager.loadInventory();
		
		// Initializing Drinks 
		initializeDrinks();
		
		// Get Drink Names from Enum
		String[] drinkNames = new String[Drinks.values().length];
		int count = 0;
		for(Drinks drink : Drinks.values()){
			drinkNames[count++] = drink.getName();
		}
		// Sort alphabetically
		Arrays.sort(drinkNames);

		//Open Scanner to accept inputs from console
		Scanner sc = new Scanner(System.in);
		
		
		// Show Drinks Menu
		InventoryManager.ingredientList();
		// Get Menu
		getMenu(drinkNames);
		
		// While Scanner gets input
		while(sc.hasNext()){
			// If integer value
			if(sc.hasNextInt()){
				int command = sc.nextInt();
				if(drinkNames.length >= command && command > 0){
					
					if(DrinkMaker.getDrinkStatus(drinkNames[command-1])){
						System.out.println("Dispensing: " + drinkNames[command-1]);
						DrinkMaker.prepareDrink(drinkNames[command-1]);
					}else{
						System.out.println("Out of stock: " + drinkNames[command-1]);
					}
				}else{
					//Invalid Selection 
					System.out.println("Invalid selection: " + command);
				}
				//Goto next line and discard newline
				sc.nextLine();
			}else if(sc.hasNextLine()){
				// If anything else
				String command = sc.nextLine();
				if(command.equalsIgnoreCase("R")){
					InventoryManager.loadInventory();
				}else if(command.equalsIgnoreCase("Q")){
					// Quit application
					System.exit(0);
				}
				else{
					//Invalid Selection 
					System.out.println("Invalid selection: " + command);
				}
			}
			// Run inventory and menu again
			InventoryManager.ingredientList();
			getMenu(drinkNames);
		}
		
		// Close Scanner
		sc.close();
	}
	public static void getMenu(String[] drinkNames) throws ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException {
		
		System.out.println("Menu:");
		// Format Cost 
		NumberFormat formatter = new DecimalFormat("#0.00");
		
		// For all the drinks display menu and its status
		for(int i=0;i<drinkNames.length;i++){
			System.out.println(i+1 + "," + drinkNames[i] + ",$" + formatter.format(DrinkMaker.getDrink(drinkNames[i]).getTotalCost()) + "," + DrinkMaker.getDrinkStatus(drinkNames[i]));
		}
			
	}
	/*
	* Initializing six Initial Drinks. This can be used to create more drinks.
	*/
	public static void initializeDrinks(){
		String[] americanoIngredients = {new Expresso().name(),new Expresso().name(),new Expresso().name()};
		DrinkMaker.addDrink(Drinks.AMERICANO.name, americanoIngredients );
		
		String[] latteIngredients = {new Expresso().name(), new Expresso().name(),new SteamedMilk().name() };
		DrinkMaker.addDrink(Drinks.LATTE.name, latteIngredients);
		
		String[] mochaIngredients = { new Expresso().name(), new Cocoa().name(), new SteamedMilk().name(), new WhippedCream().name()};
		DrinkMaker.addDrink(Drinks.MOCHA.name, mochaIngredients);
		
		String[] cappuccinoIngredients = {new Expresso().name(), new Expresso().name(), new SteamedMilk().name(),new FoamedMilk().name()};
		DrinkMaker.addDrink(Drinks.CAPPUCCINO.name,cappuccinoIngredients );
		
		String[] coffeeIngredients = {new Coffee().name(), new Coffee().name(), new Coffee().name(),new Sugar().name(), new Cream().name() };
		DrinkMaker.addDrink(Drinks.COFFEE.name, coffeeIngredients);
		
		String[] decafIngredients = {new DecafCoffee().name(), new DecafCoffee().name(), new DecafCoffee().name(),new Sugar().name(), new Cream().name() };
		DrinkMaker.addDrink(DrinksMachine.Drinks.DECAF.name, decafIngredients);
		
	}
}
